#ifndef WINMM_IMPORT_HEADER_GUARD_
#define WINMM_IMPORT_HEADER_GUARD_
#pragma once

typedef struct winmm_struct {
	HANDLE hModule;
	BOOL (WINAPI *mciExecute)(LPCSTR pszCommand);
	BOOL (WINAPI *mciGetErrorStringA)( IN MCIERROR mcierr, OUT LPSTR pszText, IN UINT cchText);
	BOOL (WINAPI *mciGetErrorStringW)( IN MCIERROR mcierr, OUT LPWSTR pszText, IN UINT cchText);
	BOOL (WINAPI *mciSetYieldProc)( IN MCIDEVICEID mciId, IN YIELDPROC fpYieldProc, IN DWORD dwYieldData);
	BOOL (WINAPI *PlaySound)( IN LPCSTR pszSound, IN HMODULE hmod, IN DWORD fdwSound);
	BOOL (WINAPI *PlaySoundA)( IN LPCSTR pszSound, IN HMODULE hmod, IN DWORD fdwSound);
	BOOL (WINAPI *PlaySoundW)( IN LPCWSTR pszSound, IN HMODULE hmod, IN DWORD fdwSound);
	BOOL (WINAPI *sndPlaySoundA)( IN LPCSTR pszSound, IN UINT fuSound);
	BOOL (WINAPI *sndPlaySoundW)( IN LPCWSTR pszSound, IN UINT fuSound);
	DWORD (WINAPI *mixerMessage)( IN HMIXER hmx, IN UINT uMsg, IN DWORD_PTR dwParam1, IN DWORD_PTR dwParam2);
	DWORD (WINAPI *timeGetTime)(void);
	FOURCC (WINAPI *mmioStringToFOURCCA)( IN LPCSTR sz, IN UINT uFlags);
	FOURCC (WINAPI *mmioStringToFOURCCW)( IN LPCWSTR sz, IN UINT uFlags);
	HDRVR     (WINAPI *OpenDriver)( IN LPCWSTR szDriverName, IN LPCWSTR szSectionName, IN LPARAM lParam2);
	HMMIO (WINAPI *mmioOpenA)( IN OUT LPSTR pszFileName, IN OUT LPMMIOINFO pmmioinfo, IN DWORD fdwOpen);
	HMMIO (WINAPI *mmioOpenW)( IN OUT LPWSTR pszFileName, IN OUT LPMMIOINFO pmmioinfo, IN DWORD fdwOpen);
	HMODULE   (WINAPI *DrvGetModuleHandle)( IN HDRVR hDriver);
	HMODULE   (WINAPI *GetDriverModuleHandle)( IN HDRVR hDriver);
	HTASK (WINAPI *mciGetCreatorTask)( IN MCIDEVICEID mciId);
	LONG (WINAPI *mmioRead)( IN HMMIO hmmio, OUT HPSTR pch, IN LONG cch);
	LONG (WINAPI *mmioSeek)( IN HMMIO hmmio, IN LONG lOffset, IN int iOrigin);
	LONG (WINAPI *mmioWrite)( IN HMMIO hmmio, IN const char _huge* pch, IN LONG cch);
	LPMMIOPROC (WINAPI *mmioInstallIOProcA)( IN FOURCC fccIOProc, IN LPMMIOPROC pIOProc, IN DWORD dwFlags);
	LPMMIOPROC (WINAPI *mmioInstallIOProcW)( IN FOURCC fccIOProc, IN LPMMIOPROC pIOProc, IN DWORD dwFlags);
	LRESULT   (WINAPI *CloseDriver)( IN HDRVR hDriver, IN LPARAM lParam1, IN LPARAM lParam2);
	LRESULT   (WINAPI *DefDriverProc)( IN DWORD_PTR dwDriverIdentifier, IN HDRVR hdrvr, IN UINT uMsg, IN LPARAM lParam1, IN LPARAM lParam2);
	LRESULT   (WINAPI *DrvDefDriverProc)(DWORD dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
	LRESULT   (WINAPI *SendDriverMessage)( IN HDRVR hDriver, IN UINT message, IN LPARAM lParam1, IN LPARAM lParam2);
	LRESULT (WINAPI *mmioSendMessage)( IN HMMIO hmmio, IN UINT uMsg, IN LPARAM lParam1, IN LPARAM lParam2);
	MCIDEVICEID (WINAPI *mciGetDeviceIDA)( IN LPCSTR pszDevice);
	MCIDEVICEID (WINAPI *mciGetDeviceIDFromElementIDA)( IN DWORD dwElementID, IN LPCSTR lpstrType );
	MCIDEVICEID (WINAPI *mciGetDeviceIDFromElementIDW)( IN DWORD dwElementID, IN LPCWSTR lpstrType );
	MCIDEVICEID (WINAPI *mciGetDeviceIDW)( IN LPCWSTR pszDevice);
	MCIERROR  (WINAPI *mciSendStringA)( IN LPCSTR lpstrCommand, OUT LPSTR lpstrReturnString, IN UINT uReturnLength, IN HWND hwndCallback);
	MCIERROR  (WINAPI *mciSendStringW)( IN LPCWSTR lpstrCommand, OUT LPWSTR lpstrReturnString, IN UINT uReturnLength, IN HWND hwndCallback);
	MCIERROR (WINAPI *mciSendCommandA)( IN MCIDEVICEID mciId, IN UINT uMsg, IN DWORD_PTR dwParam1, IN DWORD_PTR dwParam2);
	MCIERROR (WINAPI *mciSendCommandW)( IN MCIDEVICEID mciId, IN UINT uMsg, IN DWORD_PTR dwParam1, IN DWORD_PTR dwParam2);
	MMRESULT (WINAPI *auxGetDevCapsA)( IN UINT_PTR uDeviceID, OUT LPAUXCAPSA pac, IN UINT cbac);
	MMRESULT (WINAPI *auxGetDevCapsW)( IN UINT_PTR uDeviceID, OUT LPAUXCAPSW pac, IN UINT cbac);
	MMRESULT (WINAPI *auxGetVolume)( IN UINT uDeviceID, OUT LPDWORD pdwVolume);
	MMRESULT (WINAPI *auxOutMessage)( IN UINT uDeviceID, IN UINT uMsg, IN DWORD_PTR dw1, IN DWORD_PTR dw2);
	MMRESULT (WINAPI *auxSetVolume)( IN UINT uDeviceID, IN DWORD dwVolume);
	MMRESULT (WINAPI *joyGetDevCapsA)( IN UINT_PTR uJoyID, OUT LPJOYCAPSA pjc, IN UINT cbjc);
	MMRESULT (WINAPI *joyGetDevCapsW)( IN UINT_PTR uJoyID, OUT LPJOYCAPSW pjc, IN UINT cbjc);
	MMRESULT (WINAPI *joyGetPos)( IN UINT uJoyID, OUT LPJOYINFO pji);
	MMRESULT (WINAPI *joyGetPosEx)( IN UINT uJoyID, OUT LPJOYINFOEX pji);
	MMRESULT (WINAPI *joyGetThreshold)( IN UINT uJoyID, OUT LPUINT puThreshold);
	MMRESULT (WINAPI *joyReleaseCapture)( IN UINT uJoyID);
	MMRESULT (WINAPI *joySetCapture)( IN HWND hwnd, IN UINT uJoyID, IN UINT uPeriod, IN BOOL fChanged);
	MMRESULT (WINAPI *joySetThreshold)( IN UINT uJoyID, IN UINT uThreshold);
	MMRESULT (WINAPI *midiConnect)( IN HMIDI hmi, IN HMIDIOUT hmo, IN LPVOID pReserved);
	MMRESULT (WINAPI *midiDisconnect)( IN HMIDI hmi, IN HMIDIOUT hmo, IN LPVOID pReserved);
	MMRESULT (WINAPI *midiInAddBuffer)( IN HMIDIIN hmi, IN LPMIDIHDR pmh, IN UINT cbmh);
	MMRESULT (WINAPI *midiInClose)( IN OUT HMIDIIN hmi);
	MMRESULT (WINAPI *midiInGetDevCapsA)( IN UINT_PTR uDeviceID, OUT LPMIDIINCAPSA pmic, IN UINT cbmic);
	MMRESULT (WINAPI *midiInGetDevCapsW)( IN UINT_PTR uDeviceID, OUT LPMIDIINCAPSW pmic, IN UINT cbmic);
	MMRESULT (WINAPI *midiInGetErrorTextA)( IN MMRESULT mmrError, OUT LPSTR pszText, IN UINT cchText);
	MMRESULT (WINAPI *midiInGetErrorTextW)( IN MMRESULT mmrError, OUT LPWSTR pszText, IN UINT cchText);
	MMRESULT (WINAPI *midiInGetID)( IN HMIDIIN hmi, OUT LPUINT puDeviceID);
	MMRESULT (WINAPI *midiInMessage)( IN HMIDIIN hmi, IN UINT uMsg, IN DWORD_PTR dw1, IN DWORD_PTR dw2);
	MMRESULT (WINAPI *midiInOpen)( OUT LPHMIDIIN phmi, IN UINT uDeviceID, IN DWORD_PTR dwCallback, IN DWORD_PTR dwInstance, IN DWORD fdwOpen);
	MMRESULT (WINAPI *midiInPrepareHeader)( IN HMIDIIN hmi, IN OUT LPMIDIHDR pmh, IN UINT cbmh);
	MMRESULT (WINAPI *midiInReset)( IN HMIDIIN hmi);
	MMRESULT (WINAPI *midiInStart)( IN HMIDIIN hmi);
	MMRESULT (WINAPI *midiInStop)( IN HMIDIIN hmi);
	MMRESULT (WINAPI *midiInUnprepareHeader)( IN HMIDIIN hmi, IN OUT LPMIDIHDR pmh, IN UINT cbmh);
	MMRESULT (WINAPI *midiOutCacheDrumPatches)( IN HMIDIOUT hmo, IN UINT uPatch, OUT LPWORD pwkya, IN UINT fuCache);
	MMRESULT (WINAPI *midiOutCachePatches)( IN HMIDIOUT hmo, IN UINT uBank, OUT LPWORD pwpa, IN UINT fuCache);
	MMRESULT (WINAPI *midiOutClose)( IN OUT HMIDIOUT hmo);
	MMRESULT (WINAPI *midiOutGetDevCapsA)( IN UINT_PTR uDeviceID, OUT LPMIDIOUTCAPSA pmoc, IN UINT cbmoc);
	MMRESULT (WINAPI *midiOutGetDevCapsW)( IN UINT_PTR uDeviceID, OUT LPMIDIOUTCAPSW pmoc, IN UINT cbmoc);
	MMRESULT (WINAPI *midiOutGetErrorTextA)( IN MMRESULT mmrError, OUT LPSTR pszText, IN UINT cchText);
	MMRESULT (WINAPI *midiOutGetErrorTextW)( IN MMRESULT mmrError, OUT LPWSTR pszText, IN UINT cchText);
	MMRESULT (WINAPI *midiOutGetID)( IN HMIDIOUT hmo, OUT LPUINT puDeviceID);
	MMRESULT (WINAPI *midiOutGetVolume)( IN HMIDIOUT hmo, OUT LPDWORD pdwVolume);
	MMRESULT (WINAPI *midiOutLongMsg)(IN HMIDIOUT hmo, IN LPMIDIHDR pmh, IN UINT cbmh);
	MMRESULT (WINAPI *midiOutMessage)( IN HMIDIOUT hmo, IN UINT uMsg, IN DWORD_PTR dw1, IN DWORD_PTR dw2);
	MMRESULT (WINAPI *midiOutOpen)( OUT LPHMIDIOUT phmo, IN UINT uDeviceID, IN DWORD_PTR dwCallback, IN DWORD_PTR dwInstance, IN DWORD fdwOpen);
	MMRESULT (WINAPI *midiOutPrepareHeader)( IN HMIDIOUT hmo, IN OUT LPMIDIHDR pmh, IN UINT cbmh);
	MMRESULT (WINAPI *midiOutReset)( IN HMIDIOUT hmo);
	MMRESULT (WINAPI *midiOutSetVolume)( IN HMIDIOUT hmo, IN DWORD dwVolume);
	MMRESULT (WINAPI *midiOutShortMsg)( IN HMIDIOUT hmo, IN DWORD dwMsg);
	MMRESULT (WINAPI *midiOutUnprepareHeader)(IN HMIDIOUT hmo, IN OUT LPMIDIHDR pmh, IN UINT cbmh);
	MMRESULT (WINAPI *midiStreamClose)( IN HMIDISTRM hms);
	MMRESULT (WINAPI *midiStreamOpen)( OUT LPHMIDISTRM phms, IN LPUINT puDeviceID, IN DWORD cMidi, IN DWORD_PTR dwCallback, IN DWORD_PTR dwInstance, IN DWORD fdwOpen);
	MMRESULT (WINAPI *midiStreamOut)( IN HMIDISTRM hms, IN LPMIDIHDR pmh, IN UINT cbmh);
	MMRESULT (WINAPI *midiStreamPause)( IN HMIDISTRM hms);
	MMRESULT (WINAPI *midiStreamPosition)( IN HMIDISTRM hms, OUT LPMMTIME lpmmt, IN UINT cbmmt);
	MMRESULT (WINAPI *midiStreamProperty)( IN HMIDISTRM hms, OUT LPBYTE lppropdata, IN DWORD dwProperty);
	MMRESULT (WINAPI *midiStreamRestart)( IN HMIDISTRM hms);
	MMRESULT (WINAPI *midiStreamStop)( IN HMIDISTRM hms);
	MMRESULT (WINAPI *mixerClose)( IN OUT HMIXER hmx);
	MMRESULT (WINAPI *mixerGetControlDetailsA)( IN HMIXEROBJ hmxobj, IN OUT LPMIXERCONTROLDETAILS pmxcd, IN DWORD fdwDetails);
	MMRESULT (WINAPI *mixerGetControlDetailsW)( IN HMIXEROBJ hmxobj, IN OUT LPMIXERCONTROLDETAILS pmxcd, IN DWORD fdwDetails);
	MMRESULT (WINAPI *mixerGetDevCapsA)( IN UINT_PTR uMxId, OUT LPMIXERCAPSA pmxcaps, IN UINT cbmxcaps);
	MMRESULT (WINAPI *mixerGetDevCapsW)( IN UINT_PTR uMxId, OUT LPMIXERCAPSW pmxcaps, IN UINT cbmxcaps);
	MMRESULT (WINAPI *mixerGetID)( IN HMIXEROBJ hmxobj, OUT UINT FAR *puMxId, IN DWORD fdwId);
	MMRESULT (WINAPI *mixerGetLineControlsA)( IN HMIXEROBJ hmxobj, IN OUT LPMIXERLINECONTROLSA pmxlc, IN DWORD fdwControls);
	MMRESULT (WINAPI *mixerGetLineControlsW)( IN HMIXEROBJ hmxobj, IN OUT LPMIXERLINECONTROLSW pmxlc, IN DWORD fdwControls);
	MMRESULT (WINAPI *mixerGetLineInfoA)( IN HMIXEROBJ hmxobj, OUT LPMIXERLINEA pmxl, IN DWORD fdwInfo);
	MMRESULT (WINAPI *mixerGetLineInfoW)( IN HMIXEROBJ hmxobj, OUT LPMIXERLINEW pmxl, IN DWORD fdwInfo);
	MMRESULT (WINAPI *mixerOpen)( OUT LPHMIXER phmx, IN UINT uMxId, IN DWORD_PTR dwCallback, IN DWORD_PTR dwInstance, IN DWORD fdwOpen);
	MMRESULT (WINAPI *mixerSetControlDetails)( IN HMIXEROBJ hmxobj, IN LPMIXERCONTROLDETAILS pmxcd, IN DWORD fdwDetails);
	MMRESULT (WINAPI *mmioAdvance)( IN HMMIO hmmio, IN OUT LPMMIOINFO pmmioinfo, IN UINT fuAdvance);
	MMRESULT (WINAPI *mmioAscend)( IN HMMIO hmmio, IN LPMMCKINFO pmmcki, IN UINT fuAscend);
	MMRESULT (WINAPI *mmioClose)( IN HMMIO hmmio, IN UINT fuClose);
	MMRESULT (WINAPI *mmioCreateChunk)(IN HMMIO hmmio, IN LPMMCKINFO pmmcki, IN UINT fuCreate);
	MMRESULT (WINAPI *mmioDescend)( IN HMMIO hmmio, IN OUT LPMMCKINFO pmmcki, IN const MMCKINFO FAR* pmmckiParent, IN UINT fuDescend);
	MMRESULT (WINAPI *mmioFlush)( IN HMMIO hmmio, IN UINT fuFlush);
	MMRESULT (WINAPI *mmioGetInfo)( IN HMMIO hmmio, OUT LPMMIOINFO pmmioinfo, IN UINT fuInfo);
	MMRESULT (WINAPI *mmioRenameA)( IN LPCSTR pszFileName, IN LPCSTR pszNewFileName, IN LPCMMIOINFO pmmioinfo, IN DWORD fdwRename);
	MMRESULT (WINAPI *mmioRenameW)( IN LPCWSTR pszFileName, IN LPCWSTR pszNewFileName, IN LPCMMIOINFO pmmioinfo, IN DWORD fdwRename);
	MMRESULT (WINAPI *mmioSetBuffer)( IN HMMIO hmmio, IN LPSTR pchBuffer, IN LONG cchBuffer, IN UINT fuBuffer);
	MMRESULT (WINAPI *mmioSetInfo)( IN HMMIO hmmio, IN LPCMMIOINFO pmmioinfo, IN UINT fuInfo);
	MMRESULT (WINAPI *timeBeginPeriod)( IN UINT uPeriod);
	MMRESULT (WINAPI *timeEndPeriod)( IN UINT uPeriod);
	MMRESULT (WINAPI *timeGetDevCaps)( OUT LPTIMECAPS ptc, IN UINT cbtc);
	MMRESULT (WINAPI *timeGetSystemTime)( OUT LPMMTIME pmmt, IN UINT cbmmt);
	MMRESULT (WINAPI *timeKillEvent)( IN UINT uTimerID);
	MMRESULT (WINAPI *timeSetEvent)( IN UINT uDelay, IN UINT uResolution, IN LPTIMECALLBACK fptc, IN DWORD_PTR dwUser, IN UINT fuEvent);
	MMRESULT (WINAPI *waveInAddBuffer)( IN HWAVEIN hwi, IN OUT LPWAVEHDR pwh, IN UINT cbwh);
	MMRESULT (WINAPI *waveInClose)( IN OUT HWAVEIN hwi);
	MMRESULT (WINAPI *waveInGetDevCapsA)( IN UINT_PTR uDeviceID, OUT LPWAVEINCAPSA pwic, IN UINT cbwic);
	MMRESULT (WINAPI *waveInGetDevCapsW)( IN UINT_PTR uDeviceID, OUT LPWAVEINCAPSW pwic, IN UINT cbwic);
	MMRESULT (WINAPI *waveInGetErrorTextA)(IN MMRESULT mmrError, OUT LPSTR pszText, IN UINT cchText);
	MMRESULT (WINAPI *waveInGetErrorTextW)(IN MMRESULT mmrError, OUT LPWSTR pszText, IN UINT cchText);
	MMRESULT (WINAPI *waveInGetID)( IN HWAVEIN hwi, OUT LPUINT puDeviceID);
	MMRESULT (WINAPI *waveInGetPosition)( IN HWAVEIN hwi, IN OUT LPMMTIME pmmt, IN UINT cbmmt);
	MMRESULT (WINAPI *waveInMessage)( IN HWAVEIN hwi, IN UINT uMsg, IN DWORD_PTR dw1, IN DWORD_PTR dw2);
	MMRESULT (WINAPI *waveInOpen)( OUT LPHWAVEIN phwi, IN UINT uDeviceID, IN LPCWAVEFORMATEX pwfx, IN DWORD_PTR dwCallback, IN DWORD_PTR dwInstance, IN DWORD fdwOpen);
	MMRESULT (WINAPI *waveInPrepareHeader)( IN HWAVEIN hwi, IN OUT LPWAVEHDR pwh, IN UINT cbwh);
	MMRESULT (WINAPI *waveInReset)( IN HWAVEIN hwi);
	MMRESULT (WINAPI *waveInStart)( IN HWAVEIN hwi);
	MMRESULT (WINAPI *waveInStop)( IN HWAVEIN hwi);
	MMRESULT (WINAPI *waveInUnprepareHeader)( IN HWAVEIN hwi, IN OUT LPWAVEHDR pwh, UINT cbwh);
	MMRESULT (WINAPI *waveOutBreakLoop)( IN HWAVEOUT hwo);
	MMRESULT (WINAPI *waveOutClose)( IN OUT HWAVEOUT hwo);
	MMRESULT (WINAPI *waveOutGetDevCapsA)( IN UINT_PTR uDeviceID, OUT LPWAVEOUTCAPSA pwoc, IN UINT cbwoc);
	MMRESULT (WINAPI *waveOutGetDevCapsW)( IN UINT_PTR uDeviceID, OUT LPWAVEOUTCAPSW pwoc, IN UINT cbwoc);
	MMRESULT (WINAPI *waveOutGetErrorTextA)( IN MMRESULT mmrError, OUT LPSTR pszText, IN UINT cchText);
	MMRESULT (WINAPI *waveOutGetErrorTextW)( IN MMRESULT mmrError, OUT LPWSTR pszText, IN UINT cchText);
	MMRESULT (WINAPI *waveOutGetID)( IN HWAVEOUT hwo, OUT LPUINT puDeviceID);
	MMRESULT (WINAPI *waveOutGetPitch)( IN HWAVEOUT hwo, OUT LPDWORD pdwPitch);
	MMRESULT (WINAPI *waveOutGetPlaybackRate)( IN HWAVEOUT hwo, OUT LPDWORD pdwRate);
	MMRESULT (WINAPI *waveOutGetPosition)( IN HWAVEOUT hwo, IN OUT LPMMTIME pmmt, IN UINT cbmmt);
	MMRESULT (WINAPI *waveOutGetVolume)( IN HWAVEOUT hwo, OUT LPDWORD pdwVolume);
	MMRESULT (WINAPI *waveOutMessage)( IN HWAVEOUT hwo, IN UINT uMsg, IN DWORD_PTR dw1, IN DWORD_PTR dw2);
	MMRESULT (WINAPI *waveOutOpen)( OUT LPHWAVEOUT phwo, IN UINT uDeviceID, IN LPCWAVEFORMATEX pwfx, IN DWORD_PTR dwCallback, IN DWORD_PTR dwInstance, IN DWORD fdwOpen);
	MMRESULT (WINAPI *waveOutPause)( IN HWAVEOUT hwo);
	MMRESULT (WINAPI *waveOutPrepareHeader)( IN HWAVEOUT hwo, IN OUT LPWAVEHDR pwh, IN UINT cbwh);
	MMRESULT (WINAPI *waveOutReset)( IN HWAVEOUT hwo);
	MMRESULT (WINAPI *waveOutRestart)( IN HWAVEOUT hwo);
	MMRESULT (WINAPI *waveOutSetPitch)( IN HWAVEOUT hwo, IN DWORD dwPitch);
	MMRESULT (WINAPI *waveOutSetPlaybackRate)( IN HWAVEOUT hwo, IN DWORD dwRate);
	MMRESULT (WINAPI *waveOutSetVolume)( IN HWAVEOUT hwo, IN DWORD dwVolume);
	MMRESULT (WINAPI *waveOutUnprepareHeader)( IN HWAVEOUT hwo, IN OUT LPWAVEHDR pwh, IN UINT cbwh);
	MMRESULT (WINAPI *waveOutWrite)( IN HWAVEOUT hwo, IN OUT LPWAVEHDR pwh, IN UINT cbwh);
	UINT (WINAPI *auxGetNumDevs)(void);
	UINT (WINAPI *joyGetNumDevs)(void);
	UINT (WINAPI *midiInGetNumDevs)(void);
	UINT (WINAPI *midiOutGetNumDevs)(void);
	UINT (WINAPI *mixerGetNumDevs)(void);
	UINT (WINAPI *mmsystemGetVersion)(void);
	UINT (WINAPI *waveInGetNumDevs)(void);
	UINT (WINAPI *waveOutGetNumDevs)(void);
	YIELDPROC (WINAPI *mciGetYieldProc)( IN MCIDEVICEID mciId, IN LPDWORD pdwYieldData);

	BOOL (WINAPI *DriverCallback)(DWORD_PTR dwCallBack, DWORD dwFlags, HDRVR hdrvr, DWORD msg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2 );
} WINMM_STRUCT;

#endif //WINMM_IMPORT_HEADER_GUARD_